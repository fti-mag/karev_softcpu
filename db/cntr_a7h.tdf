--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" lpm_modulus=4 lpm_port_updown="PORT_UNUSED" lpm_width=3 clock q CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 8.0 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_lpm_compare 2008:02:23:252825 cbx_lpm_counter 2008:02:23:252825 cbx_lpm_decode 2008:02:23:252825 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_lcell_ff (aclr, clk, datain, ena, sclr, sdata, sload)
WITH ( x_on_violation)
RETURNS ( regout);

--synthesis_resources = lut 5 reg 3 
SUBDESIGN cntr_a7h
( 
	clock	:	input;
	q[2..0]	:	output;
) 
VARIABLE 
	counter_reg_bit1a[2..0] : cycloneii_lcell_ff;
	add_sub2_result_int[3..0]	:	WIRE;
	add_sub2_cout	:	WIRE;
	add_sub2_dataa[2..0]	:	WIRE;
	add_sub2_datab[2..0]	:	WIRE;
	add_sub2_result[2..0]	:	WIRE;
	cmpr3_aeb_int	:	WIRE;
	cmpr3_aeb	:	WIRE;
	cmpr3_dataa[2..0]	:	WIRE;
	cmpr3_datab[2..0]	:	WIRE;
	aclr_actual	: WIRE;
	add_sub_one_w[2..0]	: WIRE;
	add_value_w[2..0]	: WIRE;
	clk_en	: NODE;
	cnt_en	: NODE;
	compare_result	: WIRE;
	cout_actual	: WIRE;
	current_reg_q_w[2..0]	: WIRE;
	custom_cout_w	: WIRE;
	modulus_bus[2..0]	: WIRE;
	modulus_trigger	: WIRE;
	modulus_trigger_value_w[2..0]	: WIRE;
	safe_q[2..0]	: WIRE;
	time_to_clear	: WIRE;
	trigger_mux_w[2..0]	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_reg_bit1a[].aclr = aclr_actual;
	counter_reg_bit1a[].clk = clock;
	counter_reg_bit1a[].datain = trigger_mux_w[];
	counter_reg_bit1a[].ena = (clk_en & cnt_en);
	add_sub2_result_int[] = (0, add_sub2_dataa[]) + (0, add_sub2_datab[]);
	add_sub2_result[] = add_sub2_result_int[2..0];
	add_sub2_cout = add_sub2_result_int[3];
	add_sub2_dataa[] = current_reg_q_w[];
	add_sub2_datab[] = add_value_w[];
	IF (cmpr3_dataa[] == cmpr3_datab[]) THEN
		cmpr3_aeb_int = VCC;
	ELSE
		cmpr3_aeb_int = GND;
	END IF;
	cmpr3_aeb = cmpr3_aeb_int;
	cmpr3_dataa[] = safe_q[];
	cmpr3_datab[] = modulus_bus[];
	aclr_actual = B"0";
	add_sub_one_w[] = add_sub2_result[];
	add_value_w[] = B"001";
	clk_en = VCC;
	cnt_en = VCC;
	compare_result = cmpr3_aeb;
	cout_actual = (custom_cout_w # (time_to_clear & updown_dir));
	current_reg_q_w[] = counter_reg_bit1a[].regout;
	custom_cout_w = (add_sub2_cout & add_value_w[0..0]);
	modulus_bus[] = B"011";
	modulus_trigger = cout_actual;
	modulus_trigger_value_w[] = ((! updown_dir) & modulus_bus[]);
	q[] = safe_q[];
	safe_q[] = counter_reg_bit1a[].regout;
	time_to_clear = compare_result;
	trigger_mux_w[] = (((! modulus_trigger) & add_sub_one_w[]) # (modulus_trigger & modulus_trigger_value_w[]));
	updown_dir = B"1";
END;
--VALID FILE
